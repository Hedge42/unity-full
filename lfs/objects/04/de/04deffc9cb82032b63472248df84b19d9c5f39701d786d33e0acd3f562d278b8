using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Neat.Managers;
using Neat.Tools.UI;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using Neat.InputHelpers;

public class MouseRotator : MonoBehaviour
{
    public bool active;
    public bool debugMouse;
    public bool onStart;
    public bool handleCursorLock;

    [Tooltip("False: feed this component the Vector2 mouseDelta from another component")]
    public bool isInputIndependent;

    public Transform headTransform;
    public Transform bodyTransform;

    public SensitivitySetting sensitivitySetting;


    private Quaternion xStart;
    private Quaternion yStart;

    public Keybinds _keybinds;
    public Keybinds keybinds => _keybinds ??= GetComponent<KeybindsComponent>().keybinds;
    public InputAction Look => keybinds.FPS.Look;

    public Vector3 current { get; private set; }



    private void OnEnable()
    {
        //keybinds.Enable();
        //_keybinds = new Keybinds();
        //_keybinds.Enable();
        xStart = headTransform.localRotation;
        yStart = bodyTransform.localRotation;
        sensitivitySetting.inchesPer360 = ControlSetting.Load().distance;
        //keybinds.FPS.Look.performed += HandleMouse;
    }
    private IEnumerator Start()
    {
        Toggle(onStart);

        ResetRotation();
    }

    public void Toggle(bool value)
    {
        active = value;

        if (value)
            StartCoroutine(UpdateRotation());
    }
    private void OnApplicationFocus(bool focus)
    {
        UnityEngine.Cursor.lockState = CursorLockMode.Locked;
    }
    public void ResetRotation()
    {
        headTransform.localRotation = xStart;
        bodyTransform.localRotation = yStart;
    }

    private Vector2 currentRot;
    private IEnumerator UpdateRotation()
    {
        // Get current rotation
        current = transform.rotation.eulerAngles;
        currentRot = new Vector2(current.y, -current.x);


        while (isInputIndependent && active)
        {
            var look = Look.ReadValue<Vector2>();
            SetLook(look);
            yield return null;
        }
    }

    public void SetLook(Vector2 look)
    {
        if (debugMouse)
            print($"look: {look}");

        if (sensitivitySetting.convertSensitivity)
            AdjustSensitivity(look);

        var scaledLook = look * sensitivitySetting.lookSensitivity;

        currentRot = DontFlip(currentRot + scaledLook);
        ApplyRotation(currentRot);
        //return currentRot;
    }

    private static Vector2 DontFlip(Vector2 currentRot)
    {
        // Prevent the up-down rotation from flipping upside-down
        var epsilon = Mathf.Epsilon;
        epsilon = .1f;
        if (currentRot.y >= 90) currentRot.y = 90 - epsilon;
        else if (currentRot.y <= -90) currentRot.y = -90 + epsilon;

        // Prevent the left-right rotation from breaking floating-point limits
        if (currentRot.x > 360) currentRot.x -= 360;
        else if (currentRot.x < -360) currentRot.x += 360;
        return currentRot;
    }

    private void ApplyRotation(Vector2 rot)
    {

        if (headTransform != null)
            headTransform.localRotation = Quaternion.Euler(new Vector3(-rot.y, headTransform.localRotation.eulerAngles.y));
        if (bodyTransform != null)
            bodyTransform.localRotation = Quaternion.Euler(new Vector3(transform.rotation.eulerAngles.x, rot.x));

        // Debug.Log(headTransform.localRotation.eulerAngles);
    }

    private void AdjustSensitivity(Vector2 mouseDelta)
    {
        // please leave me alone

        // normalize mouse move with DPI
        float deltaDistX = Mathf.Abs(mouseDelta.x / sensitivitySetting.mouseDPI);

        // inches per 360...
        float unitsPer360 = sensitivitySetting.convertFromCM ? sensitivitySetting.inchesPer360 / 2.52f : sensitivitySetting.inchesPer360;

        // num360s = inches / inches per 360
        float moveRatio = deltaDistX / unitsPer360;

        // degrees intended
        float desiredDegrees = moveRatio * 360;

        // degrees per mouse unit
        float multiplier = desiredDegrees / mouseDelta.x;

        if (!float.IsNaN(multiplier))
        {
            var value = Mathf.Abs(multiplier);
            sensitivitySetting.lookSensitivity = value;
            // print($"Calculated sensitivity: {value}");
        }
    }
}
