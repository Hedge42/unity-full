//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Neat/Core/Scripts/Console/ConsoleInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ConsoleInputScript : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ConsoleInputScript()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ConsoleInputMap"",
    ""maps"": [
        {
            ""name"": ""ConsoleInputMap"",
            ""id"": ""acde4658-cdb2-4bcd-91e8-e4412bacfe4b"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""033e8f90-e590-431b-95e5-2bfd2536a43b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Button"",
                    ""id"": ""e502c315-4a92-40f7-a9d1-7061b2d421c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""1ecb9d77-8a5f-4b82-a997-032548464d9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""c78549b3-20d4-4dbc-b17a-0e2beee90dc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73208215-25bf-4a70-904f-4b191ad87bd8"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df765af1-c795-4a35-91ea-ce7b5d9a8902"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7d987f3-07ed-4f83-9be9-29b9eae87409"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2987da5-7e95-4584-9235-1895c869c803"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39ee2761-dda4-4ec9-af64-e2f428d6ee72"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ef290dd-5a69-4832-b819-90f4b189e9d1"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa81e68c-bf53-4c54-b096-510c69240fd7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ConsoleInputMap
        m_ConsoleInputMap = asset.FindActionMap("ConsoleInputMap", throwIfNotFound: true);
        m_ConsoleInputMap_Toggle = m_ConsoleInputMap.FindAction("Toggle", throwIfNotFound: true);
        m_ConsoleInputMap_Navigate = m_ConsoleInputMap.FindAction("Navigate", throwIfNotFound: true);
        m_ConsoleInputMap_Submit = m_ConsoleInputMap.FindAction("Submit", throwIfNotFound: true);
        m_ConsoleInputMap_Cancel = m_ConsoleInputMap.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ConsoleInputMap
    private readonly InputActionMap m_ConsoleInputMap;
    private IConsoleInputMapActions m_ConsoleInputMapActionsCallbackInterface;
    private readonly InputAction m_ConsoleInputMap_Toggle;
    private readonly InputAction m_ConsoleInputMap_Navigate;
    private readonly InputAction m_ConsoleInputMap_Submit;
    private readonly InputAction m_ConsoleInputMap_Cancel;
    public struct ConsoleInputMapActions
    {
        private @ConsoleInputScript m_Wrapper;
        public ConsoleInputMapActions(@ConsoleInputScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_ConsoleInputMap_Toggle;
        public InputAction @Navigate => m_Wrapper.m_ConsoleInputMap_Navigate;
        public InputAction @Submit => m_Wrapper.m_ConsoleInputMap_Submit;
        public InputAction @Cancel => m_Wrapper.m_ConsoleInputMap_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_ConsoleInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConsoleInputMapActions set) { return set.Get(); }
        public void SetCallbacks(IConsoleInputMapActions instance)
        {
            if (m_Wrapper.m_ConsoleInputMapActionsCallbackInterface != null)
            {
                @Toggle.started -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnToggle;
                @Toggle.performed -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnToggle;
                @Toggle.canceled -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnToggle;
                @Navigate.started -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnNavigate;
                @Navigate.performed -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnNavigate;
                @Navigate.canceled -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnNavigate;
                @Submit.started -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnSubmit;
                @Cancel.started -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_ConsoleInputMapActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_ConsoleInputMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Toggle.started += instance.OnToggle;
                @Toggle.performed += instance.OnToggle;
                @Toggle.canceled += instance.OnToggle;
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public ConsoleInputMapActions @ConsoleInputMap => new ConsoleInputMapActions(this);
    public interface IConsoleInputMapActions
    {
        void OnToggle(InputAction.CallbackContext context);
        void OnNavigate(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
